{"version":3,"sources":["index.js"],"names":["noteTitle","noteText","saveNoteBtn","noteList","pathname","document","querySelector","location","show","elem","style","display","hide","activeNote","fetch","getNotes","headers","method","saveNote","note","Content-Type","stringify","body","concat","id","deleteNote","renderActiveNote","setAttribute","title","value","text","handleNoteSave","then","getAndRenderNotes","e","stopPropagation","target","handleNoteDelete","parse","noteId","handleNoteView","preventDefault","JSON","parentElement","getAttribute","trim","handleRenderSaveBtn","renderNoteList","notes","jsonNotes","noteListItems","createLi","regeneratorRuntime","async","_context","prev","next","awrap","json","sent","window","forEach","el","innerHTML","delBtn","arguments","length","undefined","liEl","createElement","classList","add","spanEl","addEventListener","delBtnEl","push","append","li","dataset","stop","newNoteBtn","handleNewNoteView"],"mappings":"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","file":"index.min.js","sourcesContent":["let noteTitle;\r\nlet noteText;\r\nlet saveNoteBtn;\r\nlet newNoteBtn;\r\nlet noteList;\r\n\r\nif (window.location.pathname === '/notes') {\r\n  noteTitle = document.querySelector('.note-title');\r\n  noteText = document.querySelector('.note-textarea');\r\n  saveNoteBtn = document.querySelector('.save-note');\r\n  newNoteBtn = document.querySelector('.new-note');\r\n  noteList = document.querySelectorAll('.list-container .list-group');\r\n}\r\n\r\n// Show an element\r\nconst show = (elem) => {\r\n  elem.style.display = 'inline';\r\n};\r\n\r\n// Hide an element\r\nconst hide = (elem) => {\r\n  elem.style.display = 'none';\r\n};\r\n\r\n// activeNote is used to keep track of the note in the textarea\r\nlet activeNote = {};\r\n\r\nconst getNotes = () =>\r\n  fetch('/api/notes', {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\nconst saveNote = (note) =>\r\n  fetch('/api/notes', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(note),\r\n  });\r\n\r\nconst deleteNote = (id) =>\r\n  fetch(`/api/notes/${id}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\nconst renderActiveNote = () => {\r\n  hide(saveNoteBtn);\r\n\r\n  if (activeNote.id) {\r\n    noteTitle.setAttribute('readonly', true);\r\n    noteText.setAttribute('readonly', true);\r\n    noteTitle.value = activeNote.title;\r\n    noteText.value = activeNote.text;\r\n  } else {\r\n    noteTitle.removeAttribute('readonly');\r\n    noteText.removeAttribute('readonly');\r\n    noteTitle.value = '';\r\n    noteText.value = '';\r\n  }\r\n};\r\n\r\nconst handleNoteSave = () => {\r\n  const newNote = {\r\n    title: noteTitle.value,\r\n    text: noteText.value,\r\n  };\r\n  saveNote(newNote).then(() => {\r\n    getAndRenderNotes();\r\n    renderActiveNote();\r\n  });\r\n};\r\n\r\n// Delete the clicked note\r\nconst handleNoteDelete = (e) => {\r\n  // prevents the click listener for the list from being called when the button inside of it is clicked\r\n  e.stopPropagation();\r\n\r\n  const note = e.target;\r\n  const noteId = JSON.parse(note.parentElement.getAttribute('data-note')).id;\r\n\r\n  if (activeNote.id === noteId) {\r\n    activeNote = {};\r\n  }\r\n\r\n  deleteNote(noteId).then(() => {\r\n    getAndRenderNotes();\r\n    renderActiveNote();\r\n  });\r\n};\r\n\r\n// Sets the activeNote and displays it\r\nconst handleNoteView = (e) => {\r\n  e.preventDefault();\r\n  activeNote = JSON.parse(e.target.parentElement.getAttribute('data-note'));\r\n  renderActiveNote();\r\n};\r\n\r\n// Sets the activeNote to and empty object and allows the user to enter a new note\r\nconst handleNewNoteView = (e) => {\r\n  activeNote = {};\r\n  renderActiveNote();\r\n};\r\n\r\nconst handleRenderSaveBtn = () => {\r\n  if (!noteTitle.value.trim() || !noteText.value.trim()) {\r\n    hide(saveNoteBtn);\r\n  } else {\r\n    show(saveNoteBtn);\r\n  }\r\n};\r\n\r\n// Render the list of note titles\r\nconst renderNoteList = async (notes) => {\r\n  let jsonNotes = await notes.json();\r\n  if (window.location.pathname === '/notes') {\r\n    noteList.forEach((el) => (el.innerHTML = ''));\r\n  }\r\n\r\n  let noteListItems = [];\r\n\r\n  // Returns HTML element with or without a delete button\r\n  const createLi = (text, delBtn = true) => {\r\n    const liEl = document.createElement('li');\r\n    liEl.classList.add('list-group-item');\r\n\r\n    const spanEl = document.createElement('span');\r\n    spanEl.innerText = text;\r\n    spanEl.addEventListener('click', handleNoteView);\r\n\r\n    liEl.append(spanEl);\r\n\r\n    if (delBtn) {\r\n      const delBtnEl = document.createElement('i');\r\n      delBtnEl.classList.add(\r\n        'fas',\r\n        'fa-trash-alt',\r\n        'float-right',\r\n        'text-danger',\r\n        'delete-note'\r\n      );\r\n      delBtnEl.addEventListener('click', handleNoteDelete);\r\n\r\n      liEl.append(delBtnEl);\r\n    }\r\n\r\n    return liEl;\r\n  };\r\n\r\n  if (jsonNotes.length === 0) {\r\n    noteListItems.push(createLi('No saved Notes', false));\r\n  }\r\n\r\n  jsonNotes.forEach((note) => {\r\n    const li = createLi(note.title);\r\n    li.dataset.note = JSON.stringify(note);\r\n\r\n    noteListItems.push(li);\r\n  });\r\n\r\n  if (window.location.pathname === '/notes') {\r\n    noteListItems.forEach((note) => noteList[0].append(note));\r\n  }\r\n};\r\n\r\n// Gets notes from the db and renders them to the sidebar\r\nconst getAndRenderNotes = () => getNotes().then(renderNoteList);\r\n\r\nif (window.location.pathname === '/notes') {\r\n  saveNoteBtn.addEventListener('click', handleNoteSave);\r\n  newNoteBtn.addEventListener('click', handleNewNoteView);\r\n  noteTitle.addEventListener('keyup', handleRenderSaveBtn);\r\n  noteText.addEventListener('keyup', handleRenderSaveBtn);\r\n}\r\n\r\ngetAndRenderNotes();"]}