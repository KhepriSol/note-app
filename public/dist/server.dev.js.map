{"version":3,"sources":["server.js"],"names":["express","require","path","fs","util","app","PORT","process","env","readFileAsync","promisify","readFile","writeFileAsync","writeFile","use","urlencoded","extended","json","get","req","res","data","notes","JSON","parse","console","log","status","send","post","note","body","id","length","push","stringify","idToDelete","parseInt","params","newNotes","filter","sendFile","join","__dirname","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst util = require('util');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Setup async file handling\r\nconst readFileAsync = util.promisify(fs.readFile);\r\nconst writeFileAsync = util.promisify(fs.writeFile);\r\n\r\n// Set up middleware\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\n// Define API routes\r\napp.get('/api/notes', async (req, res) => {\r\n  try {\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    res.json(notes);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error retrieving notes');\r\n  }\r\n});\r\n\r\napp.post('/api/notes', async (req, res) => {\r\n  try {\r\n    const note = req.body;\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    note.id = notes.length + 1;\r\n    notes.push(note);\r\n    await writeFileAsync('./db/db.json', JSON.stringify(notes));\r\n    res.json(note);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error saving note');\r\n  }\r\n});\r\n\r\napp.delete('/api/notes/:id', async (req, res) => {\r\n  try {\r\n    const idToDelete = parseInt(req.params.id);\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    const newNotes = notes.filter(note => note.id !== idToDelete);\r\n    await writeFileAsync('./db/db.json', JSON.stringify(newNotes));\r\n    res.send('Note deleted successfully');\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error deleting note');\r\n  }\r\n});\r\n\r\n// Define HTML routes\r\napp.get('/notes', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'notes.html'));\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n  console.log(`Server listening on http://localhost:${PORT}`);\r\n});\r\n"],"file":"server.dev.js"}