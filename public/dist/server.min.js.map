{"version":3,"sources":["server.js"],"names":["express","require","path","util","app","PORT","env","readFileAsync","promisify","fs","readFile","writeFile","writeFileAsync","use","get","req","res","data","notes","regeneratorRuntime","async","_context","prev","next","awrap","sent","JSON","parse","json","t0","console","log","status","send","stop","post","note","_context2","body","stringify","idToDelete","newNotes","_context3","parseInt","params","id","filter","sendFile","join","__dirname","listen","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst util = require('util');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Setup async file handling\r\nconst readFileAsync = util.promisify(fs.readFile);\r\nconst writeFileAsync = util.promisify(fs.writeFile);\r\n\r\n// Set up middleware\r\napp.use(express.urlencoded({ extended: true }));\r\napp.use(express.json());\r\napp.use(express.static('public'));\r\n\r\n// Define API routes\r\napp.get('/api/notes', async (req, res) => {\r\n  try {\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    res.json(notes);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error retrieving notes');\r\n  }\r\n});\r\n\r\napp.post('/api/notes', async (req, res) => {\r\n  try {\r\n    const note = req.body;\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    note.id = notes.length + 1;\r\n    notes.push(note);\r\n    await writeFileAsync('./db/db.json', JSON.stringify(notes));\r\n    res.json(note);\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error saving note');\r\n  }\r\n});\r\n\r\napp.delete('/api/notes/:id', async (req, res) => {\r\n  try {\r\n    const idToDelete = parseInt(req.params.id);\r\n    const data = await readFileAsync('./db/db.json', 'utf8');\r\n    const notes = JSON.parse(data);\r\n    const newNotes = notes.filter(note => note.id !== idToDelete);\r\n    await writeFileAsync('./db/db.json', JSON.stringify(newNotes));\r\n    res.send('Note deleted successfully');\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).send('Error deleting note');\r\n  }\r\n});\r\n\r\n// Define HTML routes\r\napp.get('/notes', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'notes.html'));\r\n});\r\n\r\napp.get('*', (req, res) => {\r\n  res.sendFile(path.join(__dirname, 'public', 'index.html'));\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => {\r\n  console.log(`Server listening on http://localhost:${PORT}`);\r\n});\r\n"]}